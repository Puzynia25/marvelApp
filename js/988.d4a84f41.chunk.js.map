{"version":3,"file":"static/js/988.d4a84f41.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import error from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={error} alt=\"Error\" style={{display: 'block', width: '150px', height: '150px', margin: '0 auto'}}/>\n    )\n}\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport mjolnir from '../../resources/img/mjolnir.png'\nimport './randomChar.scss';\n\nconst RandomChar = () => {\n\tconst [char, setChar] = useState({});\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\tconst timerId = setInterval(updateChar, 60000);\n\n\t\treturn () => {\n\t\t\tclearInterval(timerId);\n\t\t}\n\t}, [])\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id)\n\t\t.then(onCharLoaded)\n\t}\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst content = !(loading || error || !char) ? <View charContent={char}/> : null;\n\n\treturn(\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<div className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!<br/>\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</div>\n\t\t\t\t<div className=\"randomchar__title\">\n\t\t\t\t\tOr choose another one\n\t\t\t\t</div>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\tconst View = ({charContent}) => {\n\t\tconst {name, description, thumbnail, homepage, wiki} = charContent;\n\t\tlet imgStyle = {'objectFit': 'cover'};\n\t\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\timgStyle = {'objectFit': 'contain'}\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"randomchar__block\">\n\t\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n\t\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t\t<p className=\"randomchar__descr\">\n\t\t\t\t\t\t{description}      \n\t\t\t\t\t</p>\n\t\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\nexport default RandomChar;\n\n","import React, {useState, useEffect} from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n  const [charlist, setCharlist] = useState([]);\n  const [offset, setOffset] = useState(309);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [charListEnded, setCharListEnded] = useState(false);\n\n  //const nodeRef = useRef(null);\n\n  const {loading, error, getAllCharacters} = useMarvelService();\n\n  useEffect(() => { //запускается после рендера\n    onRequest(offset, true);\n  }, []) //[] - функция выполнится только 1 раз\n\n  const onRequest = (offset, initial) => { //запрос на сервер, когда кликаем на кнопку 'load more'\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n        .then(onCharListLoaded)\n  }\n\n  const onCharListLoaded = (newCharList) => {\n\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true\n    }\n\n    setCharlist(charlist => [...charlist, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset(offset => offset + 9);\n    setCharListEnded(ended);\n  }\n\n  function renderItems(arr) {\n\n    const items = arr.map((item, i) => {\n      let imgStyle = {'objectFit': 'cover'};\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'unset'};\n      }\n\n      let classChar = 'char__item';\n      if (item.id === props.charId) {\n        classChar = 'char__item char__item_selected'\n      }\n\n      return (\n        <CSSTransition \n          key={i}\n          timeout={300} \n          classNames=\"char\"\n        >\n            <li \n              className={classChar}\n              tabIndex={0}\n              onClick={() => {\n                props.onCharSelected(item.id); \n                }}\n              onKeyDown={(e) => {\n                if (e.key === ' ' || e.key === 'Enter') {\n                  props.onCharSelected(item.id); \n                }\n              }}\n            >\n                <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                <div className=\"char__name\">{item.name}</div>\n            </li>\n        </CSSTransition>\n      )\n    });\n\n    return (\n      <TransitionGroup className=\"char__grid\">\n        {items}\n      </TransitionGroup>\n    )\n  }\n\n  const items = renderItems(charlist);\n  const spinner = loading && !newItemLoading ? <Spinner/> : null;\n  const errorMessage = error ? <ErrorMessage/> : null;\n\n  return (\n      <div className=\"char__list\">\n          {spinner}\n          {errorMessage}\n          {items}\n          <button \n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            style={{\"display\" : charListEnded ? \"none\" : \"block\"}}\n            onClick={() => onRequest(offset)}>\n            <div className=\"inner\">load more</div>\n          </button> \n      </div>\n  )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return(\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    );\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const skeleton = char || loading || error ? null :  <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View charContent={char}/> : null;\n\n    return(\n        <div className=\"char__info\">\n            {errorMessage}\n            {spinner}\n            {content}\n            {skeleton}\n        </div>\n    );\n}\n\nconst View = ({charContent}) => {\n    const {name, description, thumbnail, comics, homepage, wiki} = charContent;\n\n    let imgStyle = {'objectFit': 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'}\n    }\n\n    return (\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">{description}</div>\n        <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        while (i < 10) {\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    <Link to={item.resourceURI.replace('http://gateway.marvel.com/v1/public/', '')}>{item.name}</Link></li> \n                            )\n                        }\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage} from \"formik\";\nimport { Link } from \"react-router-dom\";\nimport * as Yup from \"yup\";\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './CharSearchForm.scss'\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n    \n    const onCharLoaded = (char) => {\n        setChar(char)\n        console.log(char)\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const content = !char ? null : char.length > 0 ? \n        <div className=\"char__search-wrapper\">\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n            <Link to={`/marvelApp/characters/${char[0].id}`} className=\"button button__secondary\">\n                <div className=\"inner\">To page</div>\n            </Link>\n        </div> : \n        <div className=\"char__search-error\">The character was not found. Check the name and try again</div>\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = {({charName}) => updateChar(charName)}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name</label>\n                        <div className=\"char__search-wrapper\">\n                            <Field\n                                id=\"charName\"\n                                name=\"charName\"\n                                placeholder=\"Enter name\"\n                                type=\"text\"\n                            />\n                            <button \n                                type=\"submit\"\n                                className=\"button button__main\"\n                                disabled={loading}\n                            >\n                                <div className=\"inner\">Find</div>\n                            </button>\n                        </div>\n                        <FormikErrorMessage className=\"error\" name=\"text\" component=\"div\"/>\n                </Form>\n            </Formik>\n            {content}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch() {\n        this.setState({error: true})\n    }\n\n    render () {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children; //чтобы в дочерних компонентах отлавливались ошибки\n    }\n}\n\nexport default ErrorBoundary;","import {useState} from 'react';\n\nimport RandomChar from '../randomChar/RandomChar';\nimport CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nimport decoration from '../../resources/img/vision.png';\n\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null)\n    \n    const onCharSelected = (id) => {\n       setChar(id);\n    }\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList \n                        onCharSelected={onCharSelected}\n                        charId={selectedChar}\n                    />\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n                \n            </div>\n            <img className='bg-decoration' src={decoration} alt=\"vision\" />\n        </>\n    );\n}\n\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst  useMarvelService = () => {\n    const {loading, error, request, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apikey = 'apikey=aefde2755ed6660a8cc238637d7d41b1';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apikey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apikey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apikey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    //поиск персонажа по имени\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apikey}`);\n        return res.data.results.map(_transformCharacter);\n  \n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description about this character...',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            comics: char.comics.items,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n            pageCount: comics.pageCount || 'not available',\n            language: comics.textObjects.language || 'en-us',\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        \n        setLoading(true);\n\n        try { //пытаемся сделать запрос на сервер\n            const response = await fetch (url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error (`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json(); //await ждет ответа от responce\n\n            setLoading(false); //загрузка завершилась\n            return data; \n        } catch(e) {\n            setLoading(false); //загрузка завершилась ошибкой\n            setError(e.message);\n            throw(e) //выкидываем ошибку\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []) // чтобы кнопка try it работала после ошибки в randomChar - меняем state снова на null\n\n    return {loading, error, request, clearError};\n}\n\n\n"],"names":["src","error","alt","style","display","width","height","margin","View","charContent","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charlist","setCharlist","offset","setOffset","newItemLoading","setNewItemLoading","charListEnded","setCharListEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","items","arr","map","item","i","classChar","charId","CSSTransition","timeout","classNames","tabIndex","onCharSelected","onKeyDown","e","key","TransitionGroup","renderItems","disabled","comics","to","resourceURI","replace","skeleton","getCharacterByName","console","log","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","placeholder","type","component","ErrorBoundary","state","this","setState","children","Component","selectedChar","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apikey","res","results","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}